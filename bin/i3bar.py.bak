#!/usr/bin/env python3

from enum import Enum
import time
import sys
import subprocess
import json
import select


# System Calls
def batStats():
    acpi = subprocess.Popen(
        ['acpi', '--battery'],
        stdout=subprocess.PIPE)

    cut = subprocess.Popen(
        ['cut', '-d', ' ', '-f3'],
        stdin=acpi.stdout,
        stdout=subprocess.PIPE
    )

    sed = subprocess.Popen(
        ['sed', 's/,//'],
        stdin=cut.stdout,
        stdout=subprocess.PIPE
    )

    stdout, err = sed.communicate()

    return stdout.decode(encoding='UTF-8')


def batLevel():
    acpi = subprocess.Popen(
        ['acpi', '--battery'],
        stdout=subprocess.PIPE)

    cut = subprocess.Popen(
        ['cut', '-d', ' ', '-f4'],
        stdin=acpi.stdout,
        stdout=subprocess.PIPE
    )

    sed = subprocess.Popen(
        ['sed', 's/%,//'],
        stdin=cut.stdout,
        stdout=subprocess.PIPE
    )

    stdout, err = sed.communicate()

    return stdout.decode(encoding='UTF-8')


class ConStatus():
    widgets = []
    status = []

    def __init__(self, widgets):
        self.widgets = widgets
        # Header
        sys.stdout.write(json.dumps(
            {
                "version": 1,
                "stop_signal": 10,
                "cont_signal": 12,
                "click_events": True
            }
        ))
        # Begin endless array
        sys.stdout.write('[')
        # Send empty first array
        sys.stdout.write('[],')


    def addWidgets(self, widgets):
        self.widgets.append(widgets)

    def writeToStdout(self):
        for widget in self.widgets:
            self.status.append({
                'name': widget.name,
                'full_text': widget.text,
                'color': widget.color
            })

        sys.stdout.write(json.dumps(self.status))
        sys.stdout.flush()  # Flush stdout, otherwise won't work.


class State(Enum):
    COMPACT = 1
    CLICKED = 2


class BarWidget():
    def __init__(self, name, color='#FFFFFF'):
        self.name = name
        self.color = color

    def setState(self, state):
        self.state = state

    def update(self):
        pass

    state = State.COMPACT
    name = '[widget]'
    text = '[widget_text]'
    color = '#FFFFFF'


class BatWidget(BarWidget):
    text = 'bat:'

    def update(self):
        BAT_PART_UNICODE = '\u2b91'
        BAT_PLUGGED_UNICODE = '\u2b8e'
        BAT_FULL_UNICODE = '\u2b92'

        text = ''
        if 'Charging' in batStats():
            text = BAT_PART_UNICODE + ' +' + batLevel()
        elif 'Discharging' in batStats():
            text = BAT_PART_UNICODE + ' -' + batLevel()
        else:
            text = BAT_PLUGGED_UNICODE

        return text


def speakerStatus():
    amixer = subprocess.Popen(
        ['amixer', 'get', 'Master'],
        stdout=subprocess.PIPE)

    tail = subprocess.Popen(
        ['tail', '-n', '1'],
        stdin=amixer.stdout,
        stdout=subprocess.PIPE)

    cut = subprocess.Popen(
        ['cut', '-d', '[', '-f', '3'],
        stdin=tail.stdout,
        stdout=subprocess.PIPE)

    sed = subprocess.Popen(
        ['sed', 's/].*//g'],
        stdin=cut.stdout,
        stdout=subprocess.PIPE)

    stdout, err = sed.communicate()

    return stdout.decode(encoding='UTF-8')


def headphoneStatus():
    amixer = subprocess.Popen(
        ['amixer', '-c', '0', 'contents'],
        stdout=subprocess.PIPE)

    grep = subprocess.Popen(
        ['grep', '18', '-A', '2'],
        stdin=amixer.stdout,
        stdout=subprocess.PIPE)

    awk = subprocess.Popen(
        ['awk', 'NR==3 { print $2 }'],
        stdin=grep.stdout,
        stdout=subprocess.PIPE)

    cut = subprocess.Popen(
        ['cut', '-d', '=', '-f', '2'],
        stdin=awk.stdout,
        stdout=subprocess.PIPE)

    stdout, err = cut.communicate()

    return stdout.decode(encoding='UTF-8')


def volLevel():
    amixer = subprocess.Popen(
        ['amixer', 'get', 'Master'],
        stdout=subprocess.PIPE)

    tail = subprocess.Popen(
        ['tail', '-n', '1'],
        stdin=amixer.stdout,
        stdout=subprocess.PIPE)

    cut = subprocess.Popen(
        ['cut', '-d', '[', '-f', '2'],
        stdin=tail.stdout,
        stdout=subprocess.PIPE)

    sed = subprocess.Popen(
        ['sed', 's/\%].*//g'],
        stdin=cut.stdout,
        stdout=subprocess.PIPE)

    stdout, err = sed.communicate()

    return stdout.decode(encoding='UTF-8')


def vol():
    text = ''
    SPEAKER_UNICODE = '\u2b9e'
    HEADPHONE_UNICODE = '\u2b9c'
    MUTE_UNICODE = '\u2b9d'
    if 'on' in headphoneStatus():
        text = HEADPHONE_UNICODE + ' ' + volLevel()
    elif 'on' in speakerStatus() and 'off' in headphoneStatus():
        text = SPEAKER_UNICODE + ' ' + volLevel()
    else:
        text = MUTE_UNICODE

    return text



def date():
    text = ''
    CLOCK_UNICODE = '\u2b67'

    date = subprocess.Popen(
        ['date', '+%a %m/%d/%y %R:%S'],
        stdout=subprocess.PIPE)

    stdout, err = date.communicate()

    dateStr = stdout.decode(encoding='UTF-8')

    text = CLOCK_UNICODE + ' ' + dateStr

    return text


def procStdin():
    stdin = ''
    if select.select([sys.stdin], [], [], 0.0)[0]:
        stdin = sys.stdin.readline()

    print(json.loads(stdin))


# Colors
RED = '#b85335'
LIGHT_RED = '#cf6a4c'
LIGHT_BLUE = '#8197bf'
LIGHT_CYAN = '#8fBfdc'
LIGHT_GREEN = '#99ad6a'
YELLOW = '#fad07a'
LIGHT_GREY = '#cccccc'

# Widgets
batWidget = BatWidget('bat', LIGHT_RED)

conStatus = ConStatus([batWidget])

# Main loop
while True:
    conStatus.writeToStdout()
    '''
    procStdin()

    # Generate JSON
    jsonString = ''
    jsonString += json.dumps(
        [
            {
                "name": "vol",
                "full_text": "{vol}".format(vol=vol()),
                "color": LIGHT_RED
            },
            {
                "name": "bat",
                "full_text": "{bat}".format(bat=bat() + stdin),
                "color": LIGHT_BLUE
            },
            {
                "name": "date",
                "full_text": "{date}".format(date=date()),
                "color": YELLOW
            }
        ])
    jsonString += ','
    sys.stdout.write(jsonString)
    sys.stdout.flush()  # Flush stdout, otherwise won't work.
    '''
    time.sleep(1)
